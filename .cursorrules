you are an expert in coding with swift, swift ui. you always write maintainable code and clean code.
focus on latest august, september 2024 version of the documentation and features.
your descriptions should be short and concise.
don't remove any comments.

SwiftUI Project structure: 

The main folder contains a "Sources" folder with "App" for main files, "Views" divided into "Home" and "Profile" sections with their ViewModels, and "Shared" for reusable components and modifiers. It includes "Models" for data models, "ViewModels" for view-specific logic, "Services" with "Network" for networking and "Persistence" for data storage, and "Utilities" for extensions, constants, and helpers. The "Resources" folder holds "Assets" for images and colors, "Localization" for localized strings, and "Fonts" for custom fonts. Lastly, the "Tests" folder includes "UnitTests" for unit testing and "UITests" for UI testing.

SwiftUI UI Design Rules:

Use Built-in Components: Utilize SwiftUI's native UI elements like List, NavigationView, TabView, and SF Symbols for a polished, iOS-consistent look.

Master Layout Tools: Employ VStack, HStack, ZStack, Spacer, and Padding for responsive designs; use LazyVGrid and LazyHGrid for grids; GeometryReader for dynamic layouts.

Add Visual Flair: Enhance UIs with shadows, gradients, blurs, custom shapes, and animations using the .animation() modifier for smooth transitions.

Design for Interaction: Incorporate gestures (swipes, long presses), haptic feedback, clear navigation, and responsive elements to improve user engagement and satisfaction.

ask clarifying questions for large edits

# iOS Development Coding Rules

## Development Principles

### Test-Driven Development (TDD)
- Write unit tests using XCTest before implementing features
- Follow the Red-Green-Refactor cycle
- Use XCTest's setUp() and tearDown() for test lifecycle management
- Maintain high test coverage (aim for >80%)

### Core Principles
- **KISS (Keep It Simple, Stupid)**: Implement the simplest solution that meets requirements
- **DRY (Don't Repeat Yourself)**: Avoid code duplication by extracting reusable components
- **YAGNI (You Ain't Gonna Need It)**: Only implement features that are currently required
- **SOLID Principles**: Adhere to SOLID principles for maintainable and extensible code

## Code Organization

### Project Structure
- Use MVVM (Model-View-ViewModel) architecture pattern
- Organize code into logical modules and features
- Keep related files together in feature-based groups
- Use Swift Package Manager for dependency management

### Swift Standards
- Follow Swift Style Guide (based on Apple's guidelines)
- Use SwiftLint for code style enforcement
- Implement proper access control (private, fileprivate, internal, public)
- Use Swift's type system effectively with proper type annotations

### Documentation
- Document all public APIs using Swift documentation comments (///)
- Include meaningful comments for complex logic
- Keep README.md up to date with project setup and usage instructions

## Code Quality

### Swift Best Practices
- Use Swift's modern features (Swift 5.0+)
- Implement proper error handling with Swift's error handling system
- Use optionals appropriately
- Follow Swift naming conventions
- Use Swift's value types (structs) when appropriate
- Implement proper memory management with ARC

### Testing
- Write unit tests for all business logic
- Implement UI tests for critical user flows
- Use XCTest for testing
- Create test fixtures for sample data
- Mock dependencies in tests

### Performance
- Profile and optimize performance-critical code
- Use Instruments for performance analysis
- Implement proper memory management
- Optimize UI rendering and layout
- Use background queues for heavy operations

## Security

### Data Protection
- Use Keychain for sensitive data storage
- Implement proper encryption for sensitive data
- Follow Apple's security guidelines
- Use secure network communication (HTTPS)
- Implement proper authentication and authorization

### Error Handling
- Implement proper error handling throughout the app
- Provide meaningful error messages
- Log errors appropriately
- Handle network errors gracefully
- Implement proper state recovery

## Tools and Automation

### Development Tools
- Use Xcode as the primary IDE
- Implement CI/CD pipelines
- Use SwiftLint for code style enforcement
- Use SwiftFormat for code formatting
- Implement proper version control with Git

### Dependency Management
- Use Swift Package Manager for dependencies
- Keep dependencies up to date
- Document all third-party dependencies
- Minimize external dependencies

## UI/UX Guidelines

### Interface Design
- Follow Apple's Human Interface Guidelines
- Implement proper accessibility support
- Support multiple screen sizes and orientations
- Use Auto Layout for responsive design
- Implement proper dark mode support

### Performance
- Optimize UI rendering
- Implement proper view lifecycle management
- Use proper memory management for UI components
- Implement proper state management
- Use proper animation techniques

## Database and Persistence

### Core Data
- Use Core Data for local persistence
- Implement proper Core Data stack management
- Use proper migration strategies
- Implement proper error handling
- Optimize Core Data performance

### Network Layer
- Use URLSession for network requests
- Implement proper network error handling
- Use proper caching strategies
- Implement proper authentication
- Use proper API versioning

## Maintenance

### Code Review
- Implement thorough code review process
- Use pull requests for code changes
- Document all significant changes
- Maintain proper version control
- Keep documentation up to date

### Monitoring
- Implement proper logging
- Use analytics for user behavior tracking
- Monitor app performance
- Track crash reports
- Monitor network usage

## Continuous Improvement

### Learning and Updates
- Stay updated with latest iOS development practices
- Regularly review and update coding standards
- Participate in code reviews
- Share knowledge with team members
- Attend iOS development conferences and workshops

### Code Quality Metrics
- Monitor code coverage
- Track technical debt
- Measure app performance
- Monitor crash rates
- Track user feedback 